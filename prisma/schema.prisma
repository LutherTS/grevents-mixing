// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider             = "prisma-client-js"
}

datasource db {
  provider             = "sqlite"
  url                  = env("DATABASE_URL")
}

model User {
  id                   String       @id @default(uuid())
  state                String       @default("NONE")
  statusTitle          String       @default("NONE")
  statusDashboard      String       @default("NONE")
  statusPersonalInfo   String       @default("NONE")
  username             String       @unique
  email                String       @unique
  hashedPassword       String
  appWideName          String
  friendCode           String       @unique
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt @default(now())

  pinnedFriendId       String?      @unique // STILL NEW
  pinnedFriend         Contact?     @relation("PinnedFriend", fields: [pinnedFriendId], references: [id]) // STILL NEW

  contactFirsts        Contact[]    @relation("UserFirst")
  contactLasts         Contact[]    @relation("UserLast")

  questions            Question[]

  userQuestions        UserQuestion[]

  answers              Answer[]
}

model Contact {
  id                   String       @id @default(uuid())
  state                String       @default("NONE")
  kind                 String       @default("NONE")
  processRelationship  String       @default("NONE")
  statusOtherProfile   String       @default("NONE")
  statusRelationship   String       @default("NONE")
  blocking             Boolean      @default(false)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt @default(now())
  sentFriendAt         DateTime?
  sentIrlAt            DateTime?
  annulFriendAt        DateTime?
  annulIrlAt           DateTime?
  friendAt             DateTime?
  irlAt                DateTime?
  blockedAt            DateTime?
  latestfoundAt        DateTime?
  pinnedByFriendAt     DateTime?

  mirrorId             String?      @unique
  mirror               Contact?     @relation("MirrorContactId", fields: [mirrorId], references: [id])
  original             Contact?     @relation("MirrorContactId")
  // Since this is cyclic, it is to be understood as: 
  // Other is my mirror, but when I'm its mirror other is my original.
  // (To understand why it doesn't behave like successor/predecessor :)
  // (https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/self-relations)

  userFirstId          String    
  userFirst            User         @relation("UserFirst", fields: [userFirstId], references: [id])

  userLastId           String
  userLast             User         @relation("UserLast", fields: [userLastId], references: [id])   

  @@unique([userFirstId, userLastId])

  pinnedByFriend       User?        @relation("PinnedFriend") // STILL NEW

  userQuestionFriends  UserQuestionFriend[]
}

model Question {
  id                   String       @id @default(uuid())
  state                String       @default("NONE")
  kind                 String       @default("NONE")
  name                 String
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt @default(now())

  @@unique([kind, name])

  userId               String?      
  user                 User?        @relation(fields: [userId], references: [id])

  userQuestions        UserQuestion[]
}

model UserQuestion {
  id                   String       @id @default(uuid())
  state                String       @default("NONE")
  kind                 String       @default("NONE")
  isPinned             Boolean      @default(false)
  isPinnedForSelf      Boolean      @default(false)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt @default(now())
  pinnedAt             DateTime?
  pinnedForSelfAt      DateTime?
  upToIrlAt            DateTime?
  downFromIrlAt        DateTime?

  userId               String
  user                 User         @relation(fields: [userId], references: [id])
  questionId           String
  question             Question     @relation(fields: [questionId], references: [id])

  @@unique([userId, questionId])

  userQuestionFriends  UserQuestionFriend[]

  answer               Answer?
}

model UserQuestionFriend {
  id                   String       @id @default(uuid())
  state                String       @default("NONE")
  isSharedToFriend     Boolean      @default(false)
  isPinnedByFriend     Boolean      @default(false)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt @default(now())
  sharedToFriendAt     DateTime?
  pinnedByFriendAt     DateTime?

  userQuestionId       String
  userQuestion         UserQuestion @relation(fields: [userQuestionId], references: [id])
  contactId            String
  contact              Contact      @relation(fields: [contactId], references: [id])

  @@unique([userQuestionId, contactId])
}

model Answer {
  id                   String       @id @default(uuid())
  state                String       @default("NONE")
  value                String
  source               String? // NEW
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt @default(now())

  userQuestionId       String       @unique
  userQuestion         UserQuestion @relation(fields: [userQuestionId], references: [id], onDelete: Cascade)
  userId               String
  user                 User         @relation(fields: [userId], references: [id])

  @@unique([userQuestionId, userId])
}

// unused
// For features, notably enums, not supported by SQLite.

// enum UserState {
//   NONE
//   LIVE
//   DEACTIVATED
//   DELETED
// }

// enum UserStatusTitle {
//   NONE
//   WELCOMETOGREVENTS
//   WELCOMEBACKTOGREVENTS
// }

// enum UserStatusDashboard {
//   NONE
//   EMAILUPDATED
//   PASSWORDUPDATED
//   APPWIDENAMEUPDATED
//   FRIENDCODEUPDATED
//   NOWDEACTIVATED
//   NOWREACTIVATED
//   REDIRECTEDTODASHBOARD
//   CRITERIAPINNEDFORSELF
//   CRITERIAUNPINNEDFORSELF
//   CRITERIAREPINNEDFORSELF
//   FRIENDPINNED
//   FRIENDUNPINNED
//   USERQUESTIONFRIENDREPINNED
//   USERQUESTIONFRIENDUNPINNED
// }

// enum UserStatusPersonalInfo {
//   NONE
//   CRITERIAHIDDEN
//   CRITERIAREVEALED
//   CRITERIAPINNED
//   CRITERIAUNPINNED
//   STANDARDIZEDANSWERUPDATED
//   STANDARDIZEDANSWERDELETED
//   CUSTOMIZEDANSWERUPDATED
//   CUSTOMIZEDANSWERDELETED
//   CUSTOMANSWERUPDATED
//   NATIVECRITERIANOTIRLADDED
//   NATIVECRITERIAIRLADDED
//   PSEUDONATIVECRITERIANOTIRLADDED
//   PSEUDONATIVECRITERIAIRLADDED
//   PSEUDONATIVECRITERIAUPPEDTOIRL
//   PSEUDONATIVECRITERIADOWNEDFROMIRL
//   CUSTOMCRITERIAADDED
//   CUSTOMCRITERIADELETED
//   USERQUESTIONFRIENDSHARED
//   USERQUESTIONFRIENDUNSHARED
//   REDIRECTEDTOPERSONALINFO
// }

// enum ContactState {
//   NONE
//   LIVE
//   DELETED
// }

// enum ContactKind {
//   NONE
//   FRIEND
//   IRL
// }

// enum ContactProcessRelationship {
//   NONE
//   SENTFRIEND
//   SENTIRL
//   ANNULFRIEND
//   ANNULIRL
// }

// enum ContactStatusRelationship {
//   NONE
//   SENTFRIEND
//   SENTIRL
//   RECEIVEFRIEND
//   RECEIVEIRL
//   ANNULFRIEND
//   ANNULIRL
//   REFUSEDFRIEND
//   REFUSEDIRL
//   NOWFRIENDS
//   NOWIRLS
//   NOLONGERFRIENDS
//   NOLONGERIRLS
//   NOWBLOCKING
//   NOWUNBLOCKING
//   NOWBLOCKED
//   NOWUNBLOCKED
//   NOWBLOCKINGBACK
//   NOWBLOCKEDBACK
// }

// enum ContactStatusOtherProfile {
//   NONE
//   FIRSTACCESSEDTHROUGHFIND
//   REACCESSEDTHROUGHFIND
//   USERQUESTIONFRIENDPINNED
//   USERQUESTIONFRIENDUNPINNED
//   HASFIRSTACCESSEDTHROUGHFIND
//   HASREACCESSEDTHROUGHFIND
// }

// enum QuestionState {
//   NONE
//   LIVE
//   DELETED
// }

// enum QuestionKind {
//   NONE
//   NATIVE
//   NATIVEIRL
//   PSEUDO
//   CUSTOM
// }

// enum UserQuestionState {
//   NONE
//   LIVE
//   DELETED
//   HIDDEN
// }

// enum UserQuestionKind {
//   NONE
//   PSEUDONATIVE
//   PSEUDONATIVEIRL
// }

// enum UserQuestionFriendState {
//   NONE
//   LIVE
//   DELETED
// }

// enum AnswerState {
//   NONE
//   LIVE
//   DELETED
// }
